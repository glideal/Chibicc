
int g1;
int g2[4];

char g3=3;
short g4=4;
int g5=5;
long g6=6;
int *g7=&g5;
char*g8="abc";
//int g9=g5*2;
int g9[3]={0,1,2};
char*g10[]={"foo","bar"};
struct{char a; int b;}g11[2]={{1,2},{3,4}};
struct{int a[2];}g12[2]={{{11,12}},{{13,14}}};

struct{int a[2];}g13[2]={{1,2},3,4};
struct{int a[2];}g14[2]={1,2,3,4};
char*g15={"foo"};
char g16[][4]={'f','o','o',0,'b','a','r',0};

char g17[]  ="foobar";
char g18[10]="foobar";
char g19[3] ="foobar";

char *g20=g17+0;
char *g21=g17+3;
char *g22=g17-3;
int g23=3;
//int g23_2=g23; //ダメ
int *g24=&g23;

int assert(long expected,long actual,char*code){
    if(expected==actual){
        printf("expected==actual\n");
        printf("%s => %ld\n",code,actual);
    }else{
        printf("%s => %ld expected but got %ld\n",code,expected,actual);
        exit(1);
    }
}

int ret3(){
    return 3;
    return 5;
}

int add2(int x,int y){
    return x+y;
}

int sub2(int x,int y){
    return x-y;
}

int add6(int a,int b,int c, int d, int e,int f){
    return a+b+c+d+e+f;
}

int sub_char(char a,char b,char c){
    return a-b-c;
}

int sub_short(short a,short b,short c){
    return a-b-c;
}

int sub_long(long a,long b,long c){
    return a-b-c;
}

int*g1_ptr(){
    return &g1;
}

int fib(int x){
    if(x<=0){
        return 0;
    }
    if(x==1){
        return 1;
    }
    return fib(x-1)+fib(x-2);
}

void void_ok(){
    printf("void ok\n");
}

long power_of_2(long n){
    long num=1;
    for(int i=0;i<n;i++){
        num=num*2;
    }
    return num;
}

char char_fn();
void void_fn(){}

int inc(){
    static int num;
    num=num+1;
    return num;
}

int param_decay(int x[]){ return x[0]; }

int main(){
    
    // assert(9,({int a=3;int z=6;a+z;}),"int a=3;int z=6; a+z;");

    // assert(0,0,"0");

    // assert(8,({struct {int a;int b;}x; x.a=6;x.b=2;x.a+x.b;}),"struct {int a;int b;}x; x.a=6;x.b=2;x.a+x.b;");
    // assert(303,({
    //     struct {int a;int b;}num[3];
    //     int i;
    //     for(i=0;i<3;i=i+1){
    //         num[i].a=i;
    //         num[i].b=i+100;
    //     }
    //     num[0].b+num[1].b+num[2].b;
    // }),
    // "
    //     struct {int a;int b;}num[3];
    //     int i;
    //     for(i=0;i<3;i=i+1){
    //         num[i].a=i;
    //         num[i].b=i+100;
    //     }
    //     num[0].b+num[1].b+num[2].b;"
    // );

    assert(16,({
        struct{
            char p;
            char q;
            int num;
            int val;
            char r;
        }x;
        sizeof x;
    }),"
        struct{
            char p;
            char q;
            int num;
            int val;
            char r;
        }x;
        sizeof x;");
    
    //現時点ではポインタ同士の演算はダメ(type.c)
    //assert(15,({int x;char p;&p-&x;}),"int x;char p;int a=&x;int b=&p;b-a;");

    // assert(7,({int x=2;char p=4;int a=&x;int b=&p;b-a;}),"int x;char p;int a=&x;int b=&p;b-a;");
    // assert(1,({char x;int p;int a=&x;int b=&p;b-a;}),"char x;int p;int a=&x;int b=&p;b-a;");

    // assert(8,({struct t{int a;int b;};struct t y;sizeof(y);}),"struct t{int a;int b;}x;struct t y;sizeof(y);");
    // assert(12,({struct t{int a;int b;}x;struct t y;int t=2;y.a=10;t+y.a;}),"struct t{int a;int b;}x;struct t y;int t=2;y.a=10;t+y.a;");
    // assert(10,({struct t{int a;int b;}x;struct t*y=&x;x.a=10;y->a;}),"struct t{int a;int b;}x;struct t*y=&x;x.a=10;y->a;");
    // assert(13,({struct t{int a;int b;}x;struct t*y=&x;y->a=13;x.a;}),"struct t{int a;int b;}x;struct t*y=&x;y->a=13;x.a;");
    // assert(13,({struct t{int a;int b;}x;struct t*y=&x;(*y).a=13;x.a;}),"struct t{int a;int b;}x;struct t*y=&x;(*y).a=13;x.a;");
    
    // assert(6,({typedef int t;t x=2;sizeof(x)+x;}),"typedef int t;t x=2;sizeof(x)+x;");
    // assert(3,({typedef struct{int a;} t;t x;x.a=3;x.a;}),"typedef struct{int a} t;t x;x.a=3;x.a;");
    // assert(1,({typedef int t;t t=1;t;}),"typedef int t;t t=1;t;");
    // assert(2,({typedef struct{int a;} t;{typedef int t;}t x;x.a=2;x.a;}),"typedef struct{int a} t;{typedef int t;}t x;x.a=2;x.a;");

    // assert(4,({struct{char a;short b;}x;sizeof x;}),"struct{char a;short b;}x;sizeof x;");
    // assert(1,sub_short(7,3,3),"sub_short(7,3,3)");
    // assert(1,sub_long(7,3,3),"sub_long(7,3,3)");
    
    // assert(24,({int*x[3];sizeof(x);}),"int*x[3];sizeof(x);");//TY_ARRAY,size=3,base...TY_PTR,base...TY_INT
    // assert(8,({int (*x)[3];sizeof x;}),"{int (*x)[3];sizeof x;");//TY_PTR,base...TY_ARRAY,size=3,base...TY_INT
    // //(*y)[3]...pointer to int type array whose size is 3
    // assert(4,({int x[3];int (*y)[3]=x;/* x=&x[0] */x[1]=4;(*y)[1];}),"int x[3];int (*y)[3]=x;/* x=&x[0] */,x[1]=4;(*y)[1];");
    // assert(4,({int x[3];int (*y)[3]=x;/* x=&x[0] */x[1]=4;y[0][1];}),"int x[3];int (*y)[3]=x;/* x=&x[0] */,x[1]=4;y[0][1];");

    // g1=3;
    // assert(3,({*g1_ptr();}),"*g1_ptr();");

    //void_ok();

    // assert(0,({_Bool x=0;x;}),"_Bool x=0;x;");
    // assert(1,({_Bool x=1;x;}),"_Bool x=1;x;");
    // assert(1,({_Bool x=2;x;}),"_Bool x=2;x;");

    // assert(1,({char x;sizeof x;}),"char x;sizeof x;");
    // assert(2,({short int x;sizeof x;}),"short int x;sizeof x;");
    // assert(2,({int short x;sizeof x;}),"int short x;sizeof x;");
    // assert(4,({int x;sizeof x;}),"int x;sizeof x;");
    // assert(4,({typedef t;t x;sizeof x;}),"typedef t;t x;sizeof x;");
    // assert(8,({long int x;sizeof x;}),"long int x;sizeof x;");
    // assert(8,({int long x;sizeof x;}),"int long x;sizeof x;");
    //202

    printf("ok\n");
    return 0; //os が linux の時、 0 はプログラムの正常終了を表す
}