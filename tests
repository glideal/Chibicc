
//line cooments

/*
block comments
*/

int g1;
int g2[4];

char g3=3;
short g4=4;
int g5=5;
long g6=6;
int *g7=&g5;
char*g8="abc";
//int g9=g5*2;
int g9[3]={0,1,2};
char*g10[]={"foo","bar"};
struct{char a; int b;}g11[2]={{1,2},{3,4}};
struct{int a[2];}g12[2]={{{11,12}},{{13,14}}};

struct{int a[2];}g13[2]={{1,2},3,4};
struct{int a[2];}g14[2]={1,2,3,4};
char*g15={"foo"};
char g16[][4]={'f','o','o',0,'b','a','r',0};

char g17[]  ="foobar";
char g18[10]="foobar";
char g19[3] ="foobar";

char *g20=g17+0;
char *g21=g17+3;
char *g22=g17-3;
int g23=3;
//int g23_2=g23; //ダメ
int *g24=&g23;

int assert(long expected,long actual,char*code){
    if(expected==actual){
        printf("%s => %ld\n",code,actual);
    }else{
        printf("%s => %ld expected but got %ld\n",code,expected,actual);
        exit(1);
    }
}

int ret3(){
    return 3;
    return 5;
}

int add2(int x,int y){
    return x+y;
}

int sub2(int x,int y){
    return x-y;
}

int add6(int a,int b,int c, int d, int e,int f){
    return a+b+c+d+e+f;
}

int sub_char(char a,char b,char c){
    return a-b-c;
}

int sub_short(short a,short b,short c){
    return a-b-c;
}

int sub_long(long a,long b,long c){
    return a-b-c;
}

int*g1_ptr(){
    return &g1;
}

int fib(int x){
    if(x<=0){
        return 0;
    }
    if(x==1){
        return 1;
    }
    return fib(x-1)+fib(x-2);
}

void void_ok(){
    printf("void ok\n");
}

long power_of_2(long n){
    long num=1;
    for(int i=0;i<n;i++){
        num=num*2;
    }
    return num;
}

char char_fn();
void void_fn(){}

int inc(){
    static int num;
    num=num+1;
    return num;
}

int param_decay(int x[]){ return x[0]; }

int main(){
    
    assert(9,({int a=3;int z=6;a+z;}),"int a=3;int z=6; a+z;");

    assert(0,0,"0");

    assert(8,({struct {int a;int b;}x; x.a=6;x.b=2;x.a+x.b;}),"struct {int a;int b;}x; x.a=6;x.b=2;x.a+x.b;");
    assert(303,({
        struct {int a;int b;}num[3];
        int i;
        for(i=0;i<3;i=i+1){
            num[i].a=i;
            num[i].b=i+100;
        }
        num[0].b+num[1].b+num[2].b;
    }),
    "
struct {int a;int b;}num[3];
int i;
for(i=0;i<3;i=i+1){
    num[i].a=i;
    num[i].b=i+100;
}
num[0].b+num[1].b+num[2].b;"
    );

    assert(16,({
        struct{
            char p;
            char q;
            int num;
            int val;
            char r;
        }x;
        sizeof x;
    }),"
struct{
    char p;
    char q;
    int num;
    int val;
    char r;
}x;
sizeof x;
    ");
    
    //現時点ではポインタ同士の演算はダメ(type.c)
    //assert(15,({int x;char p;&p-&x;}),"int x;char p;int a=&x;int b=&p;b-a;");

    assert(7,({int x=2;char p=4;int a=&x;int b=&p;b-a;}),"int x;char p;int a=&x;int b=&p;b-a;");
    assert(1,({char x;int p;int a=&x;int b=&p;b-a;}),"char x;int p;int a=&x;int b=&p;b-a;");

    assert(8,({struct t{int a;int b;};struct t y;sizeof(y);}),"struct t{int a;int b;}x;struct t y;sizeof(y);");
    assert(12,({struct t{int a;int b;}x;struct t y;int t=2;y.a=10;t+y.a;}),"struct t{int a;int b;}x;struct t y;int t=2;y.a=10;t+y.a;");
    assert(10,({struct t{int a;int b;}x;struct t*y=&x;x.a=10;y->a;}),"struct t{int a;int b;}x;struct t*y=&x;x.a=10;y->a;");
    assert(13,({struct t{int a;int b;}x;struct t*y=&x;y->a=13;x.a;}),"struct t{int a;int b;}x;struct t*y=&x;y->a=13;x.a;");
    assert(13,({struct t{int a;int b;}x;struct t*y=&x;(*y).a=13;x.a;}),"struct t{int a;int b;}x;struct t*y=&x;(*y).a=13;x.a;");
    
    assert(6,({typedef int t;t x=2;sizeof(x)+x;}),"typedef int t;t x=2;sizeof(x)+x;");
    assert(3,({typedef struct{int a;} t;t x;x.a=3;x.a;}),"typedef struct{int a} t;t x;x.a=3;x.a;");
    assert(1,({typedef int t;t t=1;t;}),"typedef int t;t t=1;t;");
    assert(2,({typedef struct{int a;} t;{typedef int t;}t x;x.a=2;x.a;}),"typedef struct{int a} t;{typedef int t;}t x;x.a=2;x.a;");

    assert(4,({struct{char a;short b;}x;sizeof x;}),"struct{char a;short b;}x;sizeof x;");
    assert(1,sub_short(7,3,3),"sub_short(7,3,3)");
    assert(1,sub_long(7,3,3),"sub_long(7,3,3)");
    
    assert(24,({int*x[3];sizeof(x);}),"int*x[3];sizeof(x);");//TY_ARRAY,size=3,base...TY_PTR,base...TY_INT
    assert(8,({int (*x)[3];sizeof x;}),"{int (*x)[3];sizeof x;");//TY_PTR,base...TY_ARRAY,size=3,base...TY_INT
    //(*y)[3]...pointer to int type array whose size is 3
    assert(4,({int x[3];int (*y)[3]=x;/* x=&x[0] */x[1]=4;(*y)[1];}),"int x[3];int (*y)[3]=x;/* x=&x[0] */,x[1]=4;(*y)[1];");
    assert(4,({int x[3];int (*y)[3]=x;/* x=&x[0] */x[1]=4;y[0][1];}),"int x[3];int (*y)[3]=x;/* x=&x[0] */,x[1]=4;y[0][1];");

    g1=3;
    assert(3,({*g1_ptr();}),"*g1_ptr();");

    //void_ok();

    assert(0,({_Bool x=0;x;}),"_Bool x=0;x;");
    assert(1,({_Bool x=1;x;}),"_Bool x=1;x;");
    assert(1,({_Bool x=2;x;}),"_Bool x=2;x;");

    assert(1,({char x;sizeof x;}),"char x;sizeof x;");
    assert(2,({short int x;sizeof x;}),"short int x;sizeof x;");
    assert(2,({int short x;sizeof x;}),"int short x;sizeof x;");
    assert(4,({int x;sizeof x;}),"int x;sizeof x;");
    assert(4,({typedef t;t x;sizeof x;}),"typedef t;t x;sizeof x;");
    assert(8,({long int x;sizeof x;}),"long int x;sizeof x;");
    assert(8,({int long x;sizeof x;}),"int long x;sizeof x;");

    assert(1,sizeof(char),"sizeof(char)");
    assert(2,sizeof(short),"sizeof(short)");
    assert(2,sizeof(short int),"sizeof(short int)");
    assert(2,sizeof(int short),"sizeof(int short)");
    assert(4,sizeof(int),"sizeof(int)");
    assert(8,sizeof(long),"sizeof(long)");
    assert(8,sizeof(long int),"sizeof(long int)");
    assert(8,sizeof(int long),"sizeof(int long)");
    assert(8,sizeof(char*),"sizeof(char*)");
    assert(8,sizeof(int*),"sizeof(int*)");
    assert(8,sizeof(long*),"sizeof(long*)");
    assert(8,sizeof(int**),"sizeof(int**)");
    assert(8,sizeof(int(*)[4]),"sizeof(int(*)[4])");
    assert(32,sizeof(int*[4]),"sizeof(int*[4])");
    assert(16,sizeof(int[4]),"sizeof(int[4])");
    assert(48,sizeof(int[3][4]),"sizeof(int[3][4])");

    assert(4,sizeof(0),"sizeof(0)");
    assert(4294967297,4294967297,"4294967297");//4294967297=2^32+1...33bit
    assert(8,sizeof 4294967297,"sizeof 4294967297");

    assert(32,power_of_2(5),"power_of_2(5)");

    assert(power_of_2(32)-1,power_of_2(32)-1,"power_of_2(32)-1");
    assert(power_of_2(15)+power_of_2(2),({long num=power_of_2(33)+power_of_2(15)+power_of_2(2);(int)num;}),"long num=power_of_2(33)+power_of_2(15)+power_of_2(2);(int)num;");

    assert(97,'a',"'a'");
    assert(10,'\n',"\'\\n\'");
    
    assert(1,char_fn(),"char_fn()");

    assert(0,({enum{zero,one,two};zero;}),"enum{zero,one,two};zero;");
    assert(6,({enum{five=5,six,seven};six;}),"enum{five=5,six,seven};six;");
    assert(4,({enum t{zero,one,two};enum t y;sizeof y;}),"enum t{zero,one,two};enum t y;sizeof y;");
    assert(4,({enum t{zero,one,two};enum t y;y=4;y;}),"enum t{zero,one,two};enum t y;y=4;y;");
    assert(2,({typedef enum t{zero,one,two} t;t y;y=two;y;}),"typedef enum t{zero,one,two} t;t y;y=two;y;");

    assert(1,inc(),"inc()");//no acception to initialize static variable
    assert(2,inc(),"inc()");
    assert(3,inc(),"inc()");

    assert(3,(1,2,3),"(1,2,3)");

    assert(1,({int i=1;i++;}),"int i=1;i++;");
    assert(1,({int i=1;i--;}),"int i=1;i--;");
    assert(2,({int i=1;++i;}),"int i=1;++i;");
    assert(0,({int i=1;--i;}),"int i=1;--i;");
    assert(3,({int num[3];num[0]=3;num[1]=33;num[2]=333;int*p=num;*p;}),"int num[3];num[0]=3;num[1]=33;num[2]=333;int*p=num;*p;");
    assert(33,({int num[3];num[0]=3;num[1]=33;num[2]=333;int*p=num;p++;*p;}),"int num[3];num[0]=3;num[1]=33;num[2]=333;int*p=num;p++;*p;");

    assert(7,({int a=3;a+=4;a;}),"int a=3;a+=4;a;");
    assert(-1,({int a=3;a-=4;a;}),"int a=3;a-=4;a;");
    assert(12,({int a=3;a*=4;a;}),"int a=3;a*=4;a;");
    assert(2,({int a=8;a/=4;a;}),"int a=8;a/=4;a;");

    assert(0,!1,"!1");
    assert(0,!2,"!2");
    assert(1,!0,"!0");
    
    assert(0,~-1,"~-1");
    assert(1,~-2,"~-2");

    assert(0,0&1,"0&1");
    assert(3,7&3,"7&3");
    assert(1,5&3,"5&3");
    assert(10,-1&10,"-1&10");

    assert(1,0|1,"0|1");
    assert(3,2|1,"2|1");

    assert(0,8^8,"8^8");
    assert(13,5^8,"5^8");
    assert(1,8^9,"8^9");

    assert(1,0||5,"0||5");
    assert(0,(3-3)||0,"(3-3)||0");

    assert(0,0&&5,"0&&5");
    assert(1,(3-1)&&3,"(3-3)&&0");

    assert(8,({ struct*foo;sizeof(foo);}),"struct*foo;sizeof(foo);");
    assert(4,
    ({ struct t *foo; struct t{ int x;}; sizeof(struct t);}),
    "struct t *foo; struct t{ int x;}; sizeof(struct t);");
    assert(1,
    ({
        struct t{ struct t*next;int x;}a; 
        struct t b;
        b.x=1;
        a.next=&b;
        a.next->x;
    }),"
struct t{ struct t*next;int x;}a; 
struct t b;
b.x=1;
a.next=&b;
a.next->x;");

    assert(3,({int x[2];x[0]=3;param_decay(x);}),"int x[2];x[0]=3;param_decay(x);");

    assert(3,({int a;for(int i=0;i<10;i++)if(i==3){a=i; break;} a;}),"int a;for(int i=0;i<10;i++)if(i==3){a=i; break;} a;");
    assert(4,({int a=0;while(1)if(a++==3)break; a;}),"int a;while(1)if(a++==3)break; a;");
    assert(5,({int a=0; for(;;){ for(;;)break; if(a++==4)break; } a;}),"int a=0; for(;;){ for(;;)break; if(a++==4)break; } a;");

    assert(10,({int i=0;int j=0; for(;i<10;i++){if(i>5)continue; j++;} i;}),"int i=0;int j=0; for(;i<10;i++){if(i>5)continue; j++;} i;");
    assert( 6,({int i=0;int j=0; for(;i<10;i++){if(i>5)continue; j++;} j;}),"int i=0;int j=0; for(;i<10;i++){if(i>5)continue; j++;} j;");
    assert(10,({int i=0;int j=0;for(;!i;){for(;j!=10;j++)continue; break;} j;}),"int i=0;int j=0;for(;!i;){for(;j!=10;j++)continue; break;} j;");
    assert(11,({
        int i=0;int j=0;
        while(!i){
            while(j++!=10)continue;
            break;
        }
        j;
    }),"
int i=0;int j=0;
while(!i){
    while(j++!=10)continue;
    break;
}
j;");

    assert(2,({
    int i=0; goto e;
    d: i++;
    e: i++;
    f: i++;
    i; }),"
int i=0; goto e;
d: i++;
e: i++;
f: i++;
i; ");

    assert(111,({
        int x=1;
        int a;
        switch(x){
            case 0:a=0;
            case 1:a=1;
            case 2:a=11;
            case 3:a=111;
        }
        a;
    }),"
int x=1;
int a;
switch(x){
    case 0:a=0;
    case 1:a=1;
    case 2:a=11;
    case 3:a=111;
}
a;");
    assert(11,({
        int x=1;
        int a;
        switch(x){
            case 0:a=0;
            case 1:a=1;
            case 2:a=11;break;
            case 3:a=111;
        }
        a;
    }),"
int x=1;
int a;
switch(x){
    case 0:a=0;
    case 1:a=1;
    case 2:a=11;break;
    case 3:a=111;
}
a;");
    assert(1,({
        int x=1;
        int a;
        switch(x){
            case 0:a=0;
            case 1:a=1;break;
            case 2:a=11;
            case 3:a=111;
        }
        a;
    }),"
int x=1;
int a;
switch(x){
    case 0:a=0;
    case 1:a=1;break;
    case 2:a=11;
    case 3:a=111;
}
a;");
    assert(111,({
        int x=5;
        int a;
        switch(x){
            case 0:a=0;
            case 1:a=1;break;
            case 2:a=11;
            default:a=111;
        }
        a;
    }),"
int x=5;
int a;
switch(x){
    case 0:a=0;
    case 1:a=1;break;
    case 2:a=11;
    default:a=111;
}
a;");

    void_fn();

    assert(8,1<<3,"1<<3");
    assert(10,5<<1,"5<<1");
    assert(2,5>>1,"5>>1");
    assert(-1,-1>>1,"-1>>1");
    assert(4,({int a=2;a<<=1;a;}),"int a=2;a<<=1;a");
    assert(-1,({int a=-1;a>>=1;a;}),"int a=-1;a>>=1;a;");

    assert(3,0?2:3,"0?2:3");
    assert(2,1?2:3,"1?2:3");

    assert(10,({enum{ ten=1+2+3+4,}; ten; }),"enum{ ten=1+2+3+4,}; ten; ");
    assert(1,({int i=0;switch(3){case 5-2+0*3: i++;} i;}),"int i=0;switch(3){case 5-2+0*3: i++;} i;");
    assert(3,({char x[1+2];sizeof x;}),"char x[1+2];sizeof x;");
    assert(2,({char x[1?2:3];sizeof x;}),"char x[1?2:3];sizeof x;");

    assert(3,({int x[2][3]={{1,2,3},{4,5,6}}; x[0][2];}),"int x[2][3]={{1,2,3},{4,5,6}; x[0][2];");
    assert(5,({int x[2][3]={{1,2,3},{4,5,6}}; x[1][1];}),"int x[2][3]={{1,2,3},{4,5,6}; x[1][2];");

    assert(0,({int x[2][3]={{1,2}}; x[0][2];}),"int x[2][3]={{1,2}}; x[0][2];");
    assert(0,({int x[2][3]={{1,2}}; x[1][2];}),"int x[2][3]={{1,2}}; x[1][2];");
    assert(4,({int x[2][3]={{1,2},{4}}; x[1][0];}),"int x[2][3]={{1,2},{4}}; x[1][0];");

    assert('a',({char x[4]="abc"; x[0]; }),"char x[4]=\"abc\"; x[0]; ");
    assert('c',({char x[4]="abc"; x[2]; }),"char x[4]=\"abc\"; x[2]; ");
    assert('\0',({char x[4]="abc"; x[3]; }),"char x[4]=\"abc\"; x[3]; ");
    assert('c',({char x[2][4]={"abc","def"}; x[0][2]; }),"char x[2][4]={\"abc\",\"def\"}; x[0][2]; ");
    assert('d',({char x[2][4]={"abc","def"}; x[1][0]; }),"char x[2][4]={\"abc\",\"def\"}; x[1][0]; ");
    assert('f',({char x[2][4]={"abc","def"}; x[1][2]; }),"char x[2][4]={\"abc\",\"def\"}; x[1][2]; ");

    assert(4,({int x[]={1,2,3,4}; x[3]; }),"int x[]={1,2,3,4}; x[3]; ");
    assert(16,({int x[]={1,2,3,4}; sizeof x; }),"int x[]={1,2,3,4}; sizeof x; ");
    assert(4,({char x[]="foo"; sizeof x; }),"char x[]=\"foo\"; sizeof x; ");

    assert(2,({struct{char a;int b;int c;}x={1,2}; x.b; }),"struct{int a;int b;int c;}x={1,2}; x.b; ");
    assert(0,({struct{char a;int b;int c;}x={1,2}; x.c; }),"struct{int a;int b;int c;}x={1,2}; x.c; ");
    assert(2,({struct{int a;int b;}x[2]={{1,2},{3,4}}; x[0].b;}),"struct{int a;int b;}x[2]={{1,2},{3,4}}; x[0].b;");

    // char g3=3;
    // short g4=4;
    // int g5=5;
    // long g6=6;
    // int *g7=&g5;
    // char*g8="abc";
    // //int g9=g5*2;
    assert(3,g3,"g3");
    assert(4,g4,"g4");
    assert(5,g5,"g5");
    assert(6,g6,"g6");
    assert(5,*g7,"*g5");
    assert('b',g8[1],"g8[1]");
    // assert(10,g9,"g9");


    // int g3[3]={0,1,2};
    // char*g10[]={"foo","bar"};
    // struct{char a; int b;}g11[2]={{1,2},{3,4}};
    // struct{int a[2];}g12[2]={{11,12},{13,14}};
    assert(0,g9[0],"g3[0]");
    assert(1,g9[1],"g3[1]");
    assert(2,g9[2],"g3[2]");
    assert('r',g10[1][2],"g10[1][2]");
    assert('\0',g10[1][3],"g10[1][3]");
    assert(1,g11[0].a,"g11[0].a");
    assert(2,g11[0].b,"g11[0].b");
    assert(3,g11[1].a,"g11[1].a");
    assert(4,g11[1].b,"g11[1].b");
    assert(11,g12[0].a[0],"g12[0].a[0]");
    assert(12,g12[0].a[1],"g12[0].a[1]");
    assert(13,g12[1].a[0],"g12[1].a[0]");
    assert(14,g12[1].a[1],"g12[1].a[1]");

    // struct{int a[2];}g13[2]={{1,2},3,4};
    // struct{int a[2];}g14[2]={1,2,3,4};
    // char*g15={"foo"};
    // char g16[][4]={'f','o','o',0,'b','a','r',0};
    assert(1,g13[0].a[0],"g13[0].a[0]");
    assert(2,g13[0].a[1],"g13[0].a[1]");
    assert(3,g13[1].a[0],"g13[1].a[0]");
    assert(4,g13[1].a[1],"g13[1].a[1]");
    assert(1,g14[0].a[0],"g14[0].a[0]");
    assert(2,g14[0].a[1],"g14[0].a[1]");
    assert(3,g14[1].a[0],"g14[1].a[0]");
    assert(4,g14[1].a[1],"g14[1].a[1]");
    assert(0,({ int x[2][3]={0,1,2,3,4,5}; x[0][0]; })," int x[2][3]={0,1,2,3,4,5}; x[0][0]; ");
    assert(3,({ int x[2][3]={0,1,2,3,4,5}; x[1][0]; })," int x[2][3]={0,1,2,3,4,5}; x[1][0]; ");
    assert(0,({ struct{int a; int b;}x[2]={0,1,2,3}; x[0].a; })," struct{int a; int b;}x[2]={0,1,2,3}; x[0].a; ");
    assert(2,({ struct{int a; int b;}x[2]={0,1,2,3}; x[1].a; })," struct{int a; int b;}x[2]={0,1,2,3}; x[1].a; ");
    assert(0,strcmp(g15,"foo"),"strcmp(g15,\"foo\")");
    assert(0,strcmp(g16[0],"foo"),"strcmp(g16,\"foo\")");
    assert(0,strcmp(g16[1],"bar"),"strcmp(g16,\"bar\")");

    int val[2]=2,3;
    assert(2,val[0],"val[0]");
    assert(3,val[1],"val[1]");

    assert(1,({int num[2]={1,2,3}; num[0]; }),"num[2]={1,2,3}; num[0]; ");
    /*
    {1,2,3} の 3 は無視される
    */
    //assert(3,({int num[2]={1,2,3}; num[2]; }),"num[2]={1,2,3}; num[2]; ");

    // char g17[]  ="foobar";
    // char g18[10]="foobar";
    // char g19[3] ="foobar";
    assert( 7,sizeof(g17),"sizeof(g17)");
    assert(10,sizeof(g18),"sizeof(g18)");
    assert( 3,sizeof(g19),"sizeof(g19)");
    assert(0,memcmp(g17,"foobar",7),"memcmp(g17,\"foobar\",7)");
    assert(0,memcmp(g18,"foobar\0\0\0",10),"memcmp(g17,\"foobar\\0\\0\\0\",10)");
    assert(0,memcmp(g19,"foo",3),"memcmp(g17,\"foo\",3)");
    
    // char *g20=g17+0;
    // char *g21=g17+3;
    // char *g22=g17-3;
    // int g23=3;
    // int g23_2=g23; //ダメ
    // int *g24=&g23;
    assert(0,strcmp(g20,"foobar")   ,"strcmp(g20,\"foobar\")");
    assert(0,strcmp(g21,"bar")      ,"strcmp(g21,\"bar\")");
    assert(0,strcmp(g22+3,"foobar") ,"strcmp(g22+3,\"foobar\")");
    assert(3,g23,"g23");
    assert(3,*g24,"*g24");

    printf("ok\n");
    return 0;
}