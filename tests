
//line cooments

/*
block comments
*/

int g1;
int g2[4];

int assert(long expected,long actual,char*code){
    if(expected==actual){
        printf("%s => %ld\n",code,actual);
    }else{
        printf("%s => %ld expected but got %ld\n",code,expected,actual);
        exit(1);
    }
}

int ret3(){
    return 3;
    return 5;
}

int add2(int x,int y){
    return x+y;
}

int sub2(int x,int y){
    return x-y;
}

int add6(int a,int b,int c, int d, int e,int f){
    return a+b+c+d+e+f;
}

int sub_char(char a,char b,char c){
    return a-b-c;
}

int sub_short(short a,short b,short c){
    return a-b-c;
}

int sub_long(long a,long b,long c){
    return a-b-c;
}

int*g1_ptr(){
    return &g1;
}

int fib(int x){
    if(x<=0){
        return 0;
    }
    if(x==1){
        return 1;
    }
    return fib(x-1)+fib(x-2);
}

void void_ok(){
    printf("void ok\n");
}

long power_of_2(long n){
    long num=1;
    for(int i=0;i<n;i++){
        num=num*2;
    }
    return num;
}

char char_fn();

int inc(){
    static int num;
    num=num+1;
    return num;
}

int main(){
    
    assert(9,({int a=3;int z=6;a+z;}),"int a=3;int z=6; a+z;");

    assert(0,0,"0");

    assert(8,({struct {int a;int b;}x; x.a=6;x.b=2;x.a+x.b;}),"struct {int a;int b;}x; x.a=6;x.b=2;x.a+x.b;");
    assert(303,({
        struct {int a;int b;}num[3];
        int i;
        for(i=0;i<3;i=i+1){
            num[i].a=i;
            num[i].b=i+100;
        }
        num[0].b+num[1].b+num[2].b;
    }),
    "
        struct {int a;int b;}num[3];
        int i;
        for(i=0;i<3;i=i+1){
            num[i].a=i;
            num[i].b=i+100;
        }
        num[0].b+num[1].b+num[2].b;"
    );

    assert(16,({
        struct{
            char p;
            char q;
            int num;
            int val;
            char r;
        }x;
        sizeof x;
    }),"
        struct{
            char p;
            char q;
            int num;
            int val;
            char r;
        }x;
        sizeof x;");
    
    //現時点ではポインタ同士の演算はダメ(type.c)
    //assert(15,({int x;char p;&p-&x;}),"int x;char p;int a=&x;int b=&p;b-a;");

    assert(7,({int x=2;char p=4;int a=&x;int b=&p;b-a;}),"int x;char p;int a=&x;int b=&p;b-a;");
    assert(1,({char x;int p;int a=&x;int b=&p;b-a;}),"char x;int p;int a=&x;int b=&p;b-a;");

    assert(8,({struct t{int a;int b;};struct t y;sizeof(y);}),"struct t{int a;int b;}x;struct t y;sizeof(y);");
    assert(12,({struct t{int a;int b;}x;struct t y;int t=2;y.a=10;t+y.a;}),"struct t{int a;int b;}x;struct t y;int t=2;y.a=10;t+y.a;");
    assert(10,({struct t{int a;int b;}x;struct t*y=&x;x.a=10;y->a;}),"struct t{int a;int b;}x;struct t*y=&x;x.a=10;y->a;");
    assert(13,({struct t{int a;int b;}x;struct t*y=&x;y->a=13;x.a;}),"struct t{int a;int b;}x;struct t*y=&x;y->a=13;x.a;");
    assert(13,({struct t{int a;int b;}x;struct t*y=&x;(*y).a=13;x.a;}),"struct t{int a;int b;}x;struct t*y=&x;(*y).a=13;x.a;");
    
    assert(6,({typedef int t;t x=2;sizeof(x)+x;}),"typedef int t;t x=2;sizeof(x)+x;");
    assert(3,({typedef struct{int a;} t;t x;x.a=3;x.a;}),"typedef struct{int a} t;t x;x.a=3;x.a;");
    assert(1,({typedef int t;t t=1;t;}),"typedef int t;t t=1;t;");
    assert(2,({typedef struct{int a;} t;{typedef int t;}t x;x.a=2;x.a;}),"typedef struct{int a} t;{typedef int t;}t x;x.a=2;x.a;");

    assert(4,({struct{char a;short b;}x;sizeof x;}),"struct{char a;short b;}x;sizeof x;");
    assert(1,sub_short(7,3,3),"sub_short(7,3,3)");
    assert(1,sub_long(7,3,3),"sub_long(7,3,3)");
    
    assert(24,({int*x[3];sizeof(x);}),"int*x[3];sizeof(x);");//TY_ARRAY,size=3,base...TY_PTR,base...TY_INT
    assert(8,({int (*x)[3];sizeof x;}),"{int (*x)[3];sizeof x;");//TY_PTR,base...TY_ARRAY,size=3,base...TY_INT
    //(*y)[3]...pointer to int type array whose size is 3
    assert(4,({int x[3];int (*y)[3]=x;/* x=&x[0] */x[1]=4;(*y)[1];}),"int x[3];int (*y)[3]=x;/* x=&x[0] */,x[1]=4;(*y)[1];");
    assert(4,({int x[3];int (*y)[3]=x;/* x=&x[0] */x[1]=4;y[0][1];}),"int x[3];int (*y)[3]=x;/* x=&x[0] */,x[1]=4;y[0][1];");

    g1=3;
    assert(3,({*g1_ptr();}),"*g1_ptr();");

    //void_ok();

    assert(0,({_Bool x=0;x;}),"_Bool x=0;x;");
    assert(1,({_Bool x=1;x;}),"_Bool x=1;x;");
    assert(1,({_Bool x=2;x;}),"_Bool x=2;x;");

    assert(1,({char x;sizeof x;}),"char x;sizeof x;");
    assert(2,({short int x;sizeof x;}),"short int x;sizeof x;");
    assert(2,({int short x;sizeof x;}),"int short x;sizeof x;");
    assert(4,({int x;sizeof x;}),"int x;sizeof x;");
    assert(4,({typedef t;t x;sizeof x;}),"typedef t;t x;sizeof x;");
    assert(8,({long int x;sizeof x;}),"long int x;sizeof x;");
    assert(8,({int long x;sizeof x;}),"int long x;sizeof x;");

    assert(1,sizeof(char),"sizeof(char)");
    assert(2,sizeof(short),"sizeof(short)");
    assert(2,sizeof(short int),"sizeof(short int)");
    assert(2,sizeof(int short),"sizeof(int short)");
    assert(4,sizeof(int),"sizeof(int)");
    assert(8,sizeof(long),"sizeof(long)");
    assert(8,sizeof(long int),"sizeof(long int)");
    assert(8,sizeof(int long),"sizeof(int long)");
    assert(8,sizeof(char*),"sizeof(char*)");
    assert(8,sizeof(int*),"sizeof(int*)");
    assert(8,sizeof(long*),"sizeof(long*)");
    assert(8,sizeof(int**),"sizeof(int**)");
    assert(8,sizeof(int(*)[4]),"sizeof(int(*)[4])");
    assert(32,sizeof(int*[4]),"sizeof(int*[4])");
    assert(16,sizeof(int[4]),"sizeof(int[4])");
    assert(48,sizeof(int[3][4]),"sizeof(int[3][4])");

    assert(4,sizeof(0),"sizeof(0)");
    assert(4294967297,4294967297,"4294967297");//4294967297=2^32+1...33bit
    assert(8,sizeof 4294967297,"sizeof 4294967297");

    assert(32,power_of_2(5),"power_of_2(5)");

    assert(power_of_2(32)-1,power_of_2(32)-1,"power_of_2(32)-1");
    assert(power_of_2(15)+power_of_2(2),({long num=power_of_2(33)+power_of_2(15)+power_of_2(2);(int)num;}),"long num=power_of_2(33)+power_of_2(15)+power_of_2(2);(int)num;");

    assert(97,'a',"'a'");
    assert(10,'\n',"\'\\n\'");
    
    assert(1,char_fn(),"char_fn()");

    assert(0,({enum{zero,one,two};zero;}),"enum{zero,one,two};zero;");
    assert(6,({enum{five=5,six,seven};six;}),"enum{five=5,six,seven};six;");
    assert(4,({enum t{zero,one,two};enum t y;sizeof y;}),"enum t{zero,one,two};enum t y;sizeof y;");
    assert(4,({enum t{zero,one,two};enum t y;y=4;y;}),"enum t{zero,one,two};enum t y;y=4;y;");
    assert(2,({typedef enum t{zero,one,two} t;t y;y=two;y;}),"typedef enum t{zero,one,two} t;t y;y=two;y;");

    assert(1,inc(),"inc()");//no acception to initialize static variable
    assert(2,inc(),"inc()");
    assert(3,inc(),"inc()");

    assert(3,(1,2,3),"(1,2,3)");

    assert(1,({int i=1;i++;}),"int i=1;i++;");
    assert(1,({int i=1;i--;}),"int i=1;i--;");
    assert(2,({int i=1;++i;}),"int i=1;++i;");
    assert(0,({int i=1;--i;}),"int i=1;--i;");
    assert(3,({int num[3];num[0]=3;num[1]=33;num[2]=333;int*p=num;*p;}),"int num[3];num[0]=3;num[1]=33;num[2]=333;int*p=num;*p;");
    assert(33,({int num[3];num[0]=3;num[1]=33;num[2]=333;int*p=num;p++;*p;}),"int num[3];num[0]=3;num[1]=33;num[2]=333;int*p=num;p++;*p;");

    assert(7,({int a=3;a+=4;a;}),"int a=3;a+=4;a;");
    assert(-1,({int a=3;a-=4;a;}),"int a=3;a-=4;a;");
    assert(12,({int a=3;a*=4;a;}),"int a=3;a*=4;a;");
    assert(2,({int a=8;a/=4;a;}),"int a=8;a/=4;a;");

    assert(0,!1,"!1");
    assert(0,!2,"!2");
    assert(1,!0,"!0");
    
    assert(0,~-1,"~-1");
    assert(1,~-2,"~-2");

    assert(0,0&1,"0&1");
    assert(3,7&3,"7&3");
    assert(1,5&3,"5&3");
    assert(10,-1&10,"-1&10");

    assert(1,0|1,"0|1");
    assert(3,2|1,"2|1");

    assert(0,8^8,"8^8");
    assert(13,5^8,"5^8");
    assert(1,8^9,"8^9");

    assert(1,0||5,"0||5");
    assert(0,(3-3)||0,"(3-3)||0");

    assert(0,0&&5,"0&&5");
    assert(1,(3-1)&&3,"(3-3)&&0");

    printf("ok\n");
    return 0;
}